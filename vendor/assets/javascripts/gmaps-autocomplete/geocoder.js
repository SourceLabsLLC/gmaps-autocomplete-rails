// Generated by LiveScript 1.2.0
(function(){
  var GeoCoder;
  module.exports = GeoCoder = (function(){
    GeoCoder.displayName = 'GeoCoder';
    var prototype = GeoCoder.prototype, constructor = GeoCoder;
    importAll$(prototype, arguments[0]);
    importAll$(prototype, arguments[1]);
    function GeoCoder(completer){
      this.completer = completer;
    }
    prototype.lookup = function(type, value, update){
      var request;
      this.type = type;
      this.value = value;
      this.update = update;
      this.update || (this.update = false);
      request = {};
      request[this.type] = this.value;
      return this.geocoder.geocode(request, this.geocode);
    };
    prototype.geocode = function(results, status){
      this.debug('geocode', status);
      if (this.geocoded(status)) {
        return this.success(results);
      } else {
        return this.failure(this.type, this.value);
      }
    };
    prototype.geocoded = function(status){
      return status === google.maps.GeocoderStatus.OK;
    };
    prototype.parse = function(results){
      var result;
      result = results[0];
      if (!result) {
        return;
      }
      return {
        address: result.formatted_address,
        location: result.geometry.location,
        position: result.geometry
      };
    };
    prototype.success = function(results){
      this.debug('success', results);
      return found(this.parse(results)) || noneFound;
    };
    prototype.found = function(result){
      if (!result) {
        return;
      }
      this.display(result.address, result.location);
      if (this.update) {
        return this.updateMap(result.position);
      }
    };
    prototype.noneFound = function(){
      return this.error(this.geocodeErrorMsg());
    };
    prototype.failure = function(error){
      this.debug('failure', error.type);
      if (type === 'address') {
        return this.error(this.invalidAddressMsg(error.value));
      } else {
        this.error(this.noAddressFoundMsg());
        return this.display('', error.value);
      }
    };
    return GeoCoder;
  }(ErrorHandler, Debugger));
  function importAll$(obj, src){
    for (var key in src) obj[key] = src[key];
    return obj;
  }
}).call(this);
